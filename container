#!/bin/sh
#
# Docker_container
#    Description : Manage docker container in pacemaker
# Original Auhtor: Francois Prud'homme
# Original Release : 6 jan 2014
#
# usage : docker_containaer {start|stop|status|monitor|validate-all|meta-data}
#######################################################################

#####
# Initialization:
: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

OCF_RESKEY_binary_default="docker"
OCF_RESKEY_image_default=""
OCF_RESKEY_command_default=""
OCF_RESKEY_socket_default=""
OCF_RESKEY_hostname_default=""
OCF_RESKEY_name_default=""
OCF_RESKEY_ports_default=""
OCF_RESKEY_volumes_default=""
OCF_RESKEY_mem_default=""
OCF_RESKEY_cpu_default=""
OCF_RESKEY_options_default=""

: ${OCF_RESKEY_binary=${OCF_RESKEY_binary_default}}
: ${OCF_RESKEY_image=${OCF_RESKEY_image_default}}
: ${OCF_RESKEY_command=${OCF_RESKEY_command_default}}
: ${OCF_RESKEY_socket=${OCF_RESKEY_socket_default}}
: ${OCF_RESKEY_hostname=${OCF_RESKEY_hostname_default}}
: ${OCF_RESKEY_name=${OCF_RESKEY_name_default}}
: ${OCF_RESKEY_ports=${OCF_RESKEY_ports_default}}
: ${OCF_RESKEY_volumes=${OCF_RESKEY_volumes_default}}
: ${OCF_RESKEY_mem=${OCF_RESKEY_mem_default}}
: ${OCF_RESKEY_cpu=${OCF_RESKEY_cpu_default}}
: ${OCF_RESKEY_options=${OCF_RESKEY_options_default}}

USAGE="Usage: $0 {start|stop|status|monitor|validate-all|meta-data}";
#######################################################################

#####
# Usage
docker_c_usage() {
    echo $USAGE >&2
}

#####
#  Meta_data
docker_c_meta_data() {
    cat <<EOF
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="DockerContainer">
<version>1.0</version>
<longdesc lang="en">
Docker containers as OCF resource in a high-availability setup.
</longdesc>
<shortdesc lang="en">Manages a highly available docker container</shortdesc>

<parameters>

  <parameter name="binary" unique="0" required="1">
    <longdesc lang="en">
    Full path to the Docker binary.
    Default is "/usr/bin/docker".
    </longdesc>
    <shortdesc lang="en">Docker path</shortdesc>
    <content type="string" default="docker" />
  </parameter>

  <parameter name="image" unique="0" required="1">
    <longdesc lang="en">
    Docker image to use.
    For example, "base/ubuntu:raring".
    </longdesc>
    <shortdesc lang="en">Image</shortdesc>
    <content type="string" default="" />
  </parameter>

  <parameter name="command" unique="0" required="0">
    <longdesc lang="en">
    Command to launch on the run of image.
    For example, "/bin/bash"
    </longdesc>
    <shortdesc lang="en">Command</shortdesc>
    <content type="string" default="" />
  </parameter>

  <parameter name="socket" unique="0" required="0">
    <longdesc lang="en">
    Socket to usefor docker.
    </longdesc>
    <shortdesc lang="en">Socket</shortdesc>
    <content type="string" default="" />
  </parameter>

  <parameter name="hostname" unique="0" required="0">
    <longdesc lang="en">
    Hostname to assign on the guest.
    </longdesc>
    <shortdesc lang="en">Hostname</shortdesc>
    <content type="string" default="" />
  </parameter>

  <parameter name="name" unique="1" required="1">
    <longdesc lang="en">
    Name to assign to the container.
    </longdesc>
    <shortdesc lang="en">Name</shortdesc>
    <content type="string" default="" />
  </parameter>

  <parameter name="ports" unique="0" required="0">
    <longdesc lang="en">
    Port to publish.
    format: ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort
    For example, "-p 80:80 -p 443:443"
    </longdesc>
    <shortdesc lang="en">Ports</shortdesc>
    <content type="string" default="" />
  </parameter>

  <parameter name="volumes" unique="0" required="0">
    <longdesc lang="en">
    Bind mount a volume.
    From the host: /host:/container, from docker: /container.
    For example, "-v /opt:/opt -v /stk:/data"
    </longdesc>
    <shortdesc lang="en">Volumes</shortdesc>
    <content type="string" default="" />
  </parameter>

  <parameter name="mem" unique="0" required="0">
    <longdesc lang="en">
    Memory limit (unit can be in b, k, m or g).
    </longdesc>
    <shortdesc lang="en">Memory</shortdesc>
    <content type="string" default="" />
  </parameter>

  <parameter name="cpu" unique="0" required="0">
    <longdesc lang="en">
    CPU shares (relative weight)
    </longdesc>
    <shortdesc lang="en">Cpu</shortdesc>
    <content type="string" default="" />
  </parameter>

  <parameter name="options" unique="0" required="0">
    <longdesc lang="en">
    Other options to pass to docker run
    For example, "--net=host"
    </longdesc>
    <shortdesc lang="en">Options</shortdesc>
    <content type="string" default="" />
  </parameter>
</parameters>

<actions>
  <action name="start"   timeout="20s" />
  <action name="stop"    timeout="20s" />
  <action name="monitor" depth="0"  timeout="20s" interval="20s" />
  <action name="validate-all"  timeout="20s" />
  <action name="meta-data"  timeout="5s" />
</actions>

</resource-agent>
EOF
}

#####
# Start
docker_c_start() {
    state=$($OCF_RESKEY_binary inspect --format='{{.State.Running}}' $OCF_RESKEY_name)
    case $state in
        true)
            ocf_log info "START : Resource is already running"
            ;;
        false)
            $OCF_RESKEY_binary start $OCF_RESKEY_name
            ocf_log info "START : Start existing docker container"
            ;;
        *)
            #Prepare options
            [[ $OCF_RESKEY_hostname ]] && options="$options -h $OCF_RESKEY_hostname"
            [[ $OCF_RESKEY_name ]] && options="$options -name $OCF_RESKEY_name"
            [[ $OCF_RESKEY_ports ]] && options="$options $OCF_RESKEY_ports"
            [[ $OCF_RESKEY_volumes ]] && options="$options $OCF_RESKEY_volumes"
            [[ $OCF_RESKEY_mem ]] && options="$options -m $OCF_RESKEY_mem"
            [[ $OCF_RESKEY_cpu ]] && options="$options -v $OCF_RESKEY_cpu"
            [[ $OCF_RESKEY_options ]] && options="$options $OCF_RESKEY_options"
            #Run
            $OCF_RESKEY_binary run -d $options $OCF_RESKEY_image $OCF_RESKEY_command
            ocf_log info "START : Execute run command for docker container : $OCF_RESKEY_binary run $options $OCF_RESKEY_image $OCF_RESKEY_command"
    esac
    
    while ! docker_c_status ; do
        ocf_log info "START : Docker container has not started yet, waiting"
        sleep 2
    done
    ocf_log info "START : Docker container has started."
    return $OCF_SUCCESS
}

#####
# Stop
docker_c_stop () {
    local rc
    docker_c_status
    rc=$?
    case "$rc" in
        "$OCF_SUCCESS")
            ocf_log debug "STOP : Resource is currently running"
            ;;
        *)
            ocf_log debug "STOP : Resource is already stopped"
            return $OCF_SUCCESS
            ;;
    esac
    $OCF_RESKEY_binary stop $OCF_RESKEY_name
    while docker_c_status ; do
        ocf_log debug "STOP : Docker container has not stopped yet, waiting"
        sleep 2
    done
    return $OCF_SUCCESS
}

#####
# Status
docker_c_status() {
    local rc
    state=$($OCF_RESKEY_binary inspect -format='{{.State.Running}}' $OCF_RESKEY_name)

    case $state in
      true)
        rc=$OCF_SUCCESS
        ocf_log debug "STATUS : Container $OCF_RESKEY_name is running"
        ;;
      false|*)
        rc=$OCF_NOT_RUNNING
        ocf_log debug "STATUS : Container $OCF_RESKEY_name is not running"
        ;;
    esac
    return $rc
}

######
# Validate
docker_c_validate_all() {
    return $OCF_SUCCESS
}

#######################################################################

#####
# Main

# Make sure meta-data and usage always succeed
case $__OCF_ACTION in
meta-data)      docker_c_meta_data
                exit $OCF_SUCCESS
                ;;
usage|help)     docker_c_usage
                exit $OCF_SUCCESS
                ;;
esac

[[ $OCF_RESKEY_socket ]] && OCF_RESKEY_binary=$(echo "$OCF_RESKEY_binary -H $OCF_RESKEY_socket")

# Anything other than meta-data and usage must pass validation
docker_c_validate_all || exit $?

# Translate each action into the appropriate function call
case $__OCF_ACTION in
start)          docker_c_start;;
stop)           docker_c_stop;;
status|monitor) docker_c_status;;
validate-all)   docker_c_validate_all;;
*)              docker_c_usage
                exit $OCF_ERR_UNIMPLEMENTED
                ;;
esac
rc=$?

# The resource agent may optionally log a debug message
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION returned $rc"
exit $rc
